{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\D E L L\\\\NetMedsTask\\\\src\\\\components\\\\Pages\\\\Home\\\\Home.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Alert, Button, Col, Collapse, Form, ListGroup, Row } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createTemplate } from '../../../Redux/rootForm/rootFormActions';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle, faEdit, faTrashAlt } from '@fortawesome/free-regular-svg-icons';\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\n\nfunction Home() {\n  const formElements = ['Text Field', 'Number Field', 'Email Field', 'CheckBox Field', 'TextArea Field', 'Date Field'];\n  const [formFields, setFormFields] = useState([]);\n  const [name, setName] = useState('');\n  const [enableControls, setEnableControls] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const dispatch = useDispatch();\n  const ref = useRef(null);\n  const [formTemplate, setFormTemplate] = useState([]);\n  const [global, setGlobal] = useState([]);\n  const product = useSelector(state => state);\n  const [inUpdateView, setInUpdateView] = useState(false);\n  const [isEditable, setisEditable] = useState(false);\n  const [ind, setInd] = useState('');\n  var [labelObj, setLabelObj] = useState({});\n\n  const enableInput = () => {\n    if (formFields && formFields.length) {\n      setFormFields([]);\n      setName('');\n    }\n\n    setInUpdateView(false);\n    setEnableControls(true);\n  };\n\n  const nameChange = e => {\n    setName(e.target.value);\n  };\n\n  const saveForm = () => {\n    if (global && global.length) {\n      setShowAlert(false);\n      let tempObj = {};\n      tempObj['formFields'] = global;\n      tempObj['formName'] = name;\n      let tempArr = formTemplate && formTemplate.length ? [...formTemplate] : [];\n      tempArr.push(name);\n      setFormTemplate(tempArr);\n      dispatch(createTemplate(tempObj));\n      setName('');\n      setFormFields([]);\n      setEnableControls(false);\n    } else {\n      setShowAlert(true);\n    }\n  };\n\n  const deleteFormElement = (item, index) => {\n    let tempFields = [...formFields];\n    tempFields.splice(index, 1);\n    setFormFields(tempFields);\n    setGlobal(tempFields);\n  };\n\n  const displaySelectedTemplate = (item, index) => {\n    let tempForm = product.form.forms[item]['metaData'];\n    setEnableControls(true);\n    setInUpdateView(true);\n    setName(item);\n    setFormFields(tempForm);\n  };\n\n  const editSelectedLable = props => {\n    setInd(props === null || props === void 0 ? void 0 : props.indexing);\n    setisEditable(!isEditable);\n  };\n\n  const modifyLabelName = (event, props) => {\n    var _props$data, _props$data2, _props$data3;\n\n    let tempObj = {};\n    tempObj['type'] = props === null || props === void 0 ? void 0 : (_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.data['type'];\n    tempObj['displayLabel'] = event.target.value;\n    tempObj['label'] = event.target.value + '_' + (props === null || props === void 0 ? void 0 : (_props$data2 = props.data) === null || _props$data2 === void 0 ? void 0 : _props$data2.indexing);\n    tempObj['index'] = props === null || props === void 0 ? void 0 : (_props$data3 = props.data) === null || _props$data3 === void 0 ? void 0 : _props$data3.indexing;\n    labelObj = tempObj;\n  };\n\n  const renameLabels = () => {\n    var _labelObj;\n\n    let tempArr = formFields && formFields.length ? [...formFields] : [];\n    tempArr[(_labelObj = labelObj) === null || _labelObj === void 0 ? void 0 : _labelObj.index] = labelObj;\n    setFormFields(tempArr);\n    setGlobal(tempArr);\n    setisEditable(!isEditable);\n  };\n\n  const getSelected = (value, index) => {\n    if (inUpdateView) return;\n\n    if (name !== '') {\n      let item = value;\n      let type = \"\";\n      let label = \"\";\n      let tempArr = formFields && formFields.length ? [...formFields] : [];\n      let field = {\n        type: \"\",\n        label: \"\"\n      };\n\n      switch (item) {\n        case 'Text Field':\n          type = \"text\";\n          label = \"Text\";\n          break;\n\n        case 'Number Field':\n          type = \"number\";\n          label = \"Number\";\n          break;\n\n        case 'Email Field':\n          type = \"email\";\n          label = \"Email\";\n          break;\n\n        case 'CheckBox Field':\n          type = \"checkbox\";\n          label = \"Check\";\n          break;\n\n        case 'TextArea Field':\n          type = \"textArea\";\n          label = \"Text Area\";\n          break;\n\n        case 'Date Field':\n          type = \"date\";\n          label = \"Select Date\";\n          break;\n      }\n\n      field.type = type;\n      field.label = label + '_' + tempArr.length;\n      field.displayLabel = label;\n      tempArr.push(field);\n      setFormFields(tempArr);\n      setGlobal(tempArr);\n      setShowAlert(false);\n    } else {\n      setShowAlert(true);\n    }\n  };\n\n  useEffect(() => {\n    if (product && product.form && product.form.forms) {\n      let tempObj = Object.keys(product.form.forms);\n      setFormTemplate(tempObj);\n    }\n  }, [product]);\n\n  const EmailTag = props => {\n    var _props$data4;\n\n    return /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formBasicEmail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }, props === null || props === void 0 ? void 0 : (_props$data4 = props.data) === null || _props$data4 === void 0 ? void 0 : _props$data4.displayLabel), ' ', /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      style: {\n        display: inUpdateView ? 'none' : ''\n      },\n      icon: isEditable && props.indexing === ind ? faCheckCircle : faEdit,\n      onClick: () => {\n        isEditable && props.indexing === ind ? renameLabels() : editSelectedLable(props);\n      },\n      \"aria-controls\": \"example-collapse-text\",\n      \"aria-expanded\": isEditable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 74\n      }\n    }), props.indexing === ind && /*#__PURE__*/React.createElement(EditLabel, {\n      data: props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 44\n      }\n    }), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"email\",\n      placeholder: \"Enter email\",\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Form.Text, {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, \"We'll never share your email with anyone else.\"));\n  };\n\n  const TextTag = props => {\n    var _props$data5;\n\n    return /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formBasicEmail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }, props === null || props === void 0 ? void 0 : (_props$data5 = props.data) === null || _props$data5 === void 0 ? void 0 : _props$data5.displayLabel), ' ', /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      style: {\n        display: inUpdateView ? 'none' : ''\n      },\n      icon: isEditable && props.indexing === ind ? faCheckCircle : faEdit,\n      onClick: () => {\n        isEditable && props.indexing === ind ? renameLabels() : editSelectedLable(props);\n      },\n      \"aria-controls\": \"example-collapse-text\",\n      \"aria-expanded\": isEditable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 74\n      }\n    }), props.indexing === ind && /*#__PURE__*/React.createElement(EditLabel, {\n      data: props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 44\n      }\n    }), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      placeholder: \"Enter Text\",\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }));\n  };\n\n  const NumberTag = props => {\n    var _props$data6;\n\n    return /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formBasicEmail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    }, props === null || props === void 0 ? void 0 : (_props$data6 = props.data) === null || _props$data6 === void 0 ? void 0 : _props$data6.displayLabel), ' ', /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      style: {\n        display: inUpdateView ? 'none' : ''\n      },\n      icon: isEditable && props.indexing === ind ? faCheckCircle : faEdit,\n      onClick: () => {\n        isEditable && props.indexing === ind ? renameLabels() : editSelectedLable(props);\n      },\n      \"aria-controls\": \"example-collapse-text\",\n      \"aria-expanded\": isEditable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 75\n      }\n    }), props.indexing === ind && /*#__PURE__*/React.createElement(EditLabel, {\n      data: props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 44\n      }\n    }), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"number\",\n      placeholder: \"12345....\",\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }\n    }));\n  };\n\n  const CheckBox = props => {\n    var _props$data7;\n\n    return /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formBasicCheckbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    }, props === null || props === void 0 ? void 0 : (_props$data7 = props.data) === null || _props$data7 === void 0 ? void 0 : _props$data7.displayLabel), ' ', /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      style: {\n        display: inUpdateView ? 'none' : ''\n      },\n      icon: isEditable && props.indexing === ind ? faCheckCircle : faEdit,\n      onClick: () => {\n        isEditable && props.indexing === ind ? renameLabels() : editSelectedLable(props);\n      },\n      \"aria-controls\": \"example-collapse-text\",\n      \"aria-expanded\": isEditable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 74\n      }\n    }), props.indexing === ind && /*#__PURE__*/React.createElement(EditLabel, {\n      data: props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 44\n      }\n    }), /*#__PURE__*/React.createElement(Form.Check, {\n      type: \"checkbox\",\n      label: \"Check me out\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }));\n  };\n\n  const TextArea = props => {\n    var _props$data8;\n\n    return /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formBasicTextArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }\n    }, props === null || props === void 0 ? void 0 : (_props$data8 = props.data) === null || _props$data8 === void 0 ? void 0 : _props$data8.displayLabel), ' ', /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      style: {\n        display: inUpdateView ? 'none' : ''\n      },\n      icon: isEditable && props.indexing === ind ? faCheckCircle : faEdit,\n      onClick: () => {\n        isEditable && props.indexing === ind ? renameLabels() : editSelectedLable(props);\n      },\n      \"aria-controls\": \"example-collapse-text\",\n      \"aria-expanded\": isEditable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 74\n      }\n    }), props.indexing === ind && /*#__PURE__*/React.createElement(EditLabel, {\n      data: props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 44\n      }\n    }), /*#__PURE__*/React.createElement(\"textarea\", {\n      className: \"form-control\",\n      rows: \"3\",\n      col: \"3\",\n      id: \"comment\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }\n    }));\n  };\n\n  const DateArea = props => {\n    var _props$data9;\n\n    return /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formBasicDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }\n    }, props === null || props === void 0 ? void 0 : (_props$data9 = props.data) === null || _props$data9 === void 0 ? void 0 : _props$data9.displayLabel), ' ', /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      style: {\n        display: inUpdateView ? 'none' : ''\n      },\n      icon: isEditable && props.indexing === ind ? faCheckCircle : faEdit,\n      onClick: () => {\n        isEditable && props.indexing === ind ? renameLabels() : editSelectedLable(props);\n      },\n      \"aria-controls\": \"example-collapse-text\",\n      \"aria-expanded\": isEditable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 74\n      }\n    }), props.indexing === ind && /*#__PURE__*/React.createElement(EditLabel, {\n      data: props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 44\n      }\n    }), /*#__PURE__*/React.createElement(Form.Check, {\n      type: \"date\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }\n    }));\n  };\n\n  const ShowAlert = () => {\n    return /*#__PURE__*/React.createElement(Alert, {\n      variant: \"danger\",\n      onClose: () => setShowAlert(false),\n      dismissible: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Alert.Heading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 32\n      }\n    }, name === '' ? 'Cannot add form field without a name' : 'Please add atleast one form element')));\n  };\n\n  const EditLabel = props => {\n    return /*#__PURE__*/React.createElement(Collapse, {\n      in: isEditable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"example-collapse-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      placeholder: \"Enter Label Name\",\n      size: \"sm\",\n      type: \"text\",\n      onChange: e => modifyLabelName(e, props),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 21\n      }\n    })));\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }\n  }, showAlert && /*#__PURE__*/React.createElement(ShowAlert, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    className: \"m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    className: \"border-right section left-section col-md-3 py-2 px-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex justify-content-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: enableInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 29\n    }\n  }, \" Create New Form\")), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 25\n    }\n  }, \"Created Forms\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 25\n    }\n  }), formTemplate.map((item, index) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"created-forms-list bg-white my-1\",\n    key: index,\n    onClick: () => displaySelectedTemplate(item, index),\n    action: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 29\n    }\n  }, item, \" \")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    className: \" col-md-6 border-right section-two py-2 px-4 section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 25\n    }\n  }, inUpdateView ? 'Created Form Template' : 'Create New Form'), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: enableControls ? \"block\" : \"none\"\n    },\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"name.....\",\n    value: name || '',\n    type: \"text\",\n    onChange: nameChange,\n    readOnly: inUpdateView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 41\n    }\n  })), !inUpdateView && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: saveForm,\n    disabled: !name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 56\n    }\n  }, \"Save\"))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 41\n    }\n  }, formFields && formFields.map((item, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"col-md-6 d-flex justify-content-evenly\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 45\n      }\n    }, item.type === 'email' && /*#__PURE__*/React.createElement(EmailTag, {\n      data: item,\n      indexing: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 75\n      }\n    }), item.type === 'text' && /*#__PURE__*/React.createElement(TextTag, {\n      data: item,\n      indexing: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 74\n      }\n    }), item.type === 'number' && /*#__PURE__*/React.createElement(NumberTag, {\n      data: item,\n      indexing: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 76\n      }\n    }), item.type === 'checkbox' && /*#__PURE__*/React.createElement(CheckBox, {\n      data: item,\n      indexing: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 78\n      }\n    }), item.type === 'textArea' && /*#__PURE__*/React.createElement(TextArea, {\n      data: item,\n      indexing: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 78\n      }\n    }), item.type === 'date' && /*#__PURE__*/React.createElement(DateArea, {\n      data: item,\n      indexing: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 74\n      }\n    })), !inUpdateView && /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      style: {\n        \"marginTop\": '6%',\n        \"cursor\": \"pointer\"\n      },\n      onClick: () => deleteFormElement(item, index),\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 67\n      }\n    }));\n  }))))), /*#__PURE__*/React.createElement(Col, {\n    className: \"col-md-3 py-2 px-2 section section-three\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 25\n    }\n  }, \"Form Fields\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(ListGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 29\n    }\n  }, formElements.map((item, index) => /*#__PURE__*/React.createElement(ListGroup.Item, {\n    key: index,\n    onClick: () => getSelected(item, index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 37\n    }\n  }, item))))))));\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/D E L L/NetMedsTask/src/components/Pages/Home/Home.js"],"names":["React","useEffect","useRef","useState","Alert","Button","Col","Collapse","Form","ListGroup","Row","useDispatch","useSelector","createTemplate","FontAwesomeIcon","faCheckCircle","faEdit","faTrashAlt","faPlusCircle","Home","formElements","formFields","setFormFields","name","setName","enableControls","setEnableControls","showAlert","setShowAlert","dispatch","ref","formTemplate","setFormTemplate","global","setGlobal","product","state","inUpdateView","setInUpdateView","isEditable","setisEditable","ind","setInd","labelObj","setLabelObj","enableInput","length","nameChange","e","target","value","saveForm","tempObj","tempArr","push","deleteFormElement","item","index","tempFields","splice","displaySelectedTemplate","tempForm","form","forms","editSelectedLable","props","indexing","modifyLabelName","event","data","renameLabels","getSelected","type","label","field","displayLabel","Object","keys","EmailTag","display","TextTag","NumberTag","CheckBox","TextArea","DateArea","ShowAlert","EditLabel","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { Alert, Button, Col, Collapse, Form, ListGroup, Row } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createTemplate } from '../../../Redux/rootForm/rootFormActions'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheckCircle, faEdit, faTrashAlt } from '@fortawesome/free-regular-svg-icons';\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\n\n\nfunction Home() {\n    const formElements = \n    ['Text Field', 'Number Field', 'Email Field', 'CheckBox Field', 'TextArea Field', 'Date Field']\n    const [formFields, setFormFields] = useState([]);\n    const [name, setName] = useState('');\n    const [enableControls, setEnableControls] = useState(false)\n    const [showAlert, setShowAlert] = useState(false);\n    const dispatch = useDispatch();\n    const ref = useRef(null);\n    const [formTemplate, setFormTemplate] = useState([]);\n    const [global, setGlobal] = useState([]);\n    const product = useSelector(state => state)\n    const [inUpdateView, setInUpdateView] = useState(false);\n    const [isEditable, setisEditable] = useState(false);\n    const [ind, setInd] = useState('');\n    var [labelObj, setLabelObj] = useState({});\n\n    \n\n    const enableInput=()=> {\n        if (formFields && formFields.length) {\n            setFormFields([]);\n            setName('');\n        }\n        setInUpdateView(false);\n        setEnableControls(true);\n    }\n\n    const nameChange=(e)=> {\n        setName(e.target.value);\n    }\n\n    const saveForm=() =>{\n        if (global && global.length) {\n            setShowAlert(false);\n            let tempObj = {}\n            tempObj['formFields'] = global;\n            tempObj['formName'] = name;\n            let tempArr = formTemplate && formTemplate.length ? [...formTemplate] : [];\n            tempArr.push(name);\n            setFormTemplate(tempArr);\n            dispatch(createTemplate(tempObj));\n            setName('');\n            setFormFields([]);\n            setEnableControls(false);\n        } else {\n            setShowAlert(true);\n        }\n    }\n\n    const deleteFormElement =(item, index)=> {\n        let tempFields = [...formFields];\n        tempFields.splice(index, 1);\n        setFormFields(tempFields);\n        setGlobal(tempFields)\n    }\n\n    const displaySelectedTemplate = (item, index)=>{\n        let tempForm = product.form.forms[item]['metaData'];\n        setEnableControls(true);\n        setInUpdateView(true);\n        setName(item);\n        setFormFields(tempForm)\n    }\n\n    const editSelectedLable = (props) =>{\n        setInd(props?.indexing)\n        setisEditable(!isEditable);\n    }\n\n    const modifyLabelName = (event, props) => {\n        let tempObj = {};\n        tempObj['type'] = props?.data?.data['type'];\n        tempObj['displayLabel'] = event.target.value;\n        tempObj['label'] = event.target.value + '_' + props?.data?.indexing;\n        tempObj['index'] = props?.data?.indexing;\n        labelObj = tempObj;\n    }\n\n    const renameLabels = ()=> {\n        let tempArr = formFields && formFields.length ? [...formFields] : [];\n        tempArr[labelObj?.index] = labelObj;\n        setFormFields(tempArr);\n        setGlobal(tempArr);\n        setisEditable(!isEditable);\n    }\n    const getSelected = (value, index) => {\n        if (inUpdateView) return\n        if (name !== '') {\n            let item = value;\n            let type = \"\";\n            let label = \"\";\n            let tempArr = formFields && formFields.length ? [...formFields] : [];\n            let field = {\n                type: \"\",\n                label: \"\"\n            }\n            switch (item) {\n                case 'Text Field':\n                    type = \"text\"\n                    label = \"Text\"\n                    break\n                case 'Number Field':\n                    type = \"number\"\n                    label = \"Number\"\n                    break\n                case 'Email Field':\n                    type = \"email\"\n                    label = \"Email\"\n                    break\n                case 'CheckBox Field':\n                    type = \"checkbox\"\n                    label = \"Check\"\n                    break\n                case 'TextArea Field':\n                    type = \"textArea\"\n                    label = \"Text Area\"\n                    break\n                case 'Date Field':\n                    type = \"date\"\n                    label = \"Select Date\"\n                    break\n            }\n            field.type = type;\n            field.label = label + '_' + tempArr.length\n            field.displayLabel = label\n            tempArr.push(field);\n            setFormFields(tempArr);\n            setGlobal(tempArr);\n            setShowAlert(false);\n        } else {\n            setShowAlert(true);\n        }\n    }\n\n    useEffect(() => {\n        if (product && product.form && product.form.forms) {\n            let tempObj = Object.keys(product.form.forms);\n            setFormTemplate(tempObj);\n        }\n    }, [product]);\n\n    const EmailTag = (props) => {\n        return (\n            < Form.Group controlId=\"formBasicEmail\" >\n                <Form.Label>{props?.data?.displayLabel}</Form.Label>{' '}<FontAwesomeIcon style={{ display: inUpdateView ? 'none' : '' }} icon={isEditable && props.indexing === ind ? faCheckCircle : faEdit} onClick={() => { isEditable && props.indexing === ind ? renameLabels() : editSelectedLable(props) }} aria-controls=\"example-collapse-text\" aria-expanded={isEditable} />\n                {props.indexing === ind && <EditLabel data={props} />}\n                <Form.Control type=\"email\" placeholder=\"Enter email\" readOnly />\n                <Form.Text className=\"text-muted\">We'll never share your email with anyone else.</Form.Text>\n            </Form.Group >\n        )\n    }\n    const TextTag = (props) => {\n        return (\n            <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>{props?.data?.displayLabel}</Form.Label>{' '}<FontAwesomeIcon style={{ display: inUpdateView ? 'none' : '' }} icon={isEditable && props.indexing === ind ? faCheckCircle : faEdit} onClick={() => { isEditable && props.indexing === ind ? renameLabels() : editSelectedLable(props) }} aria-controls=\"example-collapse-text\" aria-expanded={isEditable} />\n                {props.indexing === ind && <EditLabel data={props} />}\n                <Form.Control type=\"text\" placeholder=\"Enter Text\" readOnly />\n            </Form.Group>\n        )\n    }\n    const  NumberTag = (props) => {\n        return (\n            <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label >{props?.data?.displayLabel}</Form.Label>{' '}<FontAwesomeIcon style={{ display: inUpdateView ? 'none' : '' }} icon={isEditable && props.indexing === ind ? faCheckCircle : faEdit} onClick={() => { isEditable && props.indexing === ind ? renameLabels() : editSelectedLable(props) }} aria-controls=\"example-collapse-text\" aria-expanded={isEditable} />\n                {props.indexing === ind && <EditLabel data={props} />}\n                <Form.Control type=\"number\" placeholder=\"12345....\" readOnly />\n            </Form.Group>\n        )\n    }\n    const CheckBox = (props) =>{\n        return (\n            <Form.Group controlId=\"formBasicCheckbox\">\n                <Form.Label>{props?.data?.displayLabel}</Form.Label>{' '}<FontAwesomeIcon style={{ display: inUpdateView ? 'none' : '' }} icon={isEditable && props.indexing === ind ? faCheckCircle : faEdit} onClick={() => { isEditable && props.indexing === ind ? renameLabels() : editSelectedLable(props) }} aria-controls=\"example-collapse-text\" aria-expanded={isEditable} />\n                {props.indexing === ind && <EditLabel data={props} />}\n                <Form.Check type=\"checkbox\" label=\"Check me out\" disabled />\n            </Form.Group>\n        )\n    }\n    const TextArea = (props) =>{\n        return (\n            <Form.Group controlId=\"formBasicTextArea\">\n                <Form.Label>{props?.data?.displayLabel}</Form.Label>{' '}<FontAwesomeIcon style={{ display: inUpdateView ? 'none' : '' }} icon={isEditable && props.indexing === ind ? faCheckCircle : faEdit} onClick={() => { isEditable && props.indexing === ind ? renameLabels() : editSelectedLable(props) }} aria-controls=\"example-collapse-text\" aria-expanded={isEditable} />\n                {props.indexing === ind && <EditLabel data={props} />}\n                <textarea className=\"form-control\" rows=\"3\" col=\"3\" id=\"comment\" disabled></textarea>\n            </Form.Group>\n        )\n    }\n    const DateArea = (props) => {\n        return (\n            <Form.Group controlId=\"formBasicDate\">\n                <Form.Label>{props?.data?.displayLabel}</Form.Label>{' '}<FontAwesomeIcon style={{ display: inUpdateView ? 'none' : '' }} icon={isEditable && props.indexing === ind ? faCheckCircle : faEdit} onClick={() => { isEditable && props.indexing === ind ? renameLabels() : editSelectedLable(props) }} aria-controls=\"example-collapse-text\" aria-expanded={isEditable} />\n                {props.indexing === ind && <EditLabel data={props} />}\n                <Form.Check type=\"date\" disabled />\n            </Form.Group>\n        )\n    }\n\n    const ShowAlert =() => {\n        return (\n            <Alert variant=\"danger\" onClose={() => setShowAlert(false)} dismissible>\n                <Alert.Heading><h6>{name === '' ? 'Cannot add form field without a name' : 'Please add atleast one form element'}</h6></Alert.Heading>\n            </Alert>\n        )\n    }\n\n    const EditLabel = (props) => {\n        return (\n            <Collapse in={isEditable} >\n                <div id=\"example-collapse-text\">\n                    <Form.Control placeholder=\"Enter Label Name\" size=\"sm\" type=\"text\" onChange={(e) => modifyLabelName(e, props)} />\n                </div>\n            </Collapse>\n        )\n    }\n\n    return (\n        <>\n            <div>\n                {showAlert && <ShowAlert />}\n                <Row className=\"m-0\">\n                    <Col  className=\"border-right section left-section col-md-3 py-2 px-4\" >\n                        <div className=\"d-flex justify-content-end\">\n                            <button type=\"button\" onClick={enableInput} > Create New Form</button>\n                        </div>\n                        <h6  >Created Forms</h6>\n\n                        <div className=\"mt-2\"></div>\n                        {formTemplate.map((item, index) => (\n                            <div className=\"created-forms-list bg-white my-1\" key={index}  onClick={() => displaySelectedTemplate(item, index)} action>{item} </div>\n                        ))}\n                        <br />\n                    </Col>\n                    <Col className=\" col-md-6 border-right section-two py-2 px-4 section\" >\n                        <h6 >{inUpdateView ? 'Created Form Template' : 'Create New Form'}</h6>\n                        <div style={{ display: enableControls ? \"block\" : \"none\" }} ref={ref}>\n                            <Form>\n                                <Form.Row>\n                                    <Col>\n                                        <Form.Control placeholder=\"name.....\" value={name || ''} type=\"text\" onChange={nameChange} readOnly={inUpdateView} />\n                                    </Col>\n                                    {!inUpdateView &&  <button type=\"button\" onClick={saveForm} disabled={!name}>\n                                        Save</button>\n                                    }\n                                </Form.Row>\n                            </Form>\n                            <br />\n                            <Form>\n                                        <Form.Row>\n                            {formFields && formFields.map((item, index) => {\n                                return (<div key={index}  className=\"col-md-6 d-flex justify-content-evenly\">\n                                    \n                                            {/* <Col className=\"col-md-6\"> */}\n                                            <div>\n                                                {item.type === 'email' && <EmailTag data={item} indexing={index} />}\n                                                {item.type === 'text' && <TextTag data={item} indexing={index} />}\n                                                {item.type === 'number' && <NumberTag data={item} indexing={index} />}\n                                                {item.type === 'checkbox' && <CheckBox data={item} indexing={index} />}\n                                                {item.type === 'textArea' && <TextArea data={item} indexing={index} />}\n                                                {item.type === 'date' && <DateArea data={item} indexing={index} />}\n                                                </div>\n                                                {!inUpdateView && <FontAwesomeIcon style={{ \"marginTop\": '6%', \"cursor\": \"pointer\" }} onClick={() => deleteFormElement(item, index)} icon={faTrashAlt} />}\n                                            {/* </Col> */}\n                                            \n                                        \n                                </div>)\n                            })}\n                            </Form.Row>\n                        </Form>\n                        </div>\n                    </Col>\n                    <Col className=\"col-md-3 py-2 px-2 section section-three\">\n                        <h6>Form Fields</h6>\n                        <div>\n                            <ListGroup>\n                                {formElements.map((item, index) => (\n                                    <ListGroup.Item key={index} onClick={() => getSelected(item, index)}>{item}</ListGroup.Item>\n                                ))}\n                            </ListGroup>\n                        </div>\n                    </Col>\n                </Row>\n            </div>\n        </>\n    )\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}
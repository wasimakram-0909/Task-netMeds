{"ast":null,"code":"import { CREATE_TEMPLATE, CREATE_RECORDS, UPDATE_RECORDS, DELETE_RECORDS } from './rootFormTypes.js';\nconst initialState = {\n  forms: {},\n  records: []\n};\n\nconst rootFormReducer = (state = initialState, action) => {\n  var _action$payload, _action$payload2;\n\n  switch (action.type) {\n    case CREATE_TEMPLATE:\n      let list = state;\n      list.forms[action === null || action === void 0 ? void 0 : (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.formName] = {\n        metaData: action === null || action === void 0 ? void 0 : (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.formFields\n      };\n      state = list;\n      return state;\n\n    case CREATE_RECORDS:\n      let tempList = state;\n      tempList.records.push(action.payload);\n      return state;\n\n    case UPDATE_RECORDS:\n      let toUpdateArr = [...state.records];\n      let toUpdateindex = toUpdateArr.findIndex(({\n        id\n      }) => id === action.payload.id);\n      toUpdateArr[toUpdateindex] = action.payload;\n      state.records = [...toUpdateArr];\n      return state;\n\n    case DELETE_RECORDS:\n      let toDelArray = [...state.records];\n      let toDelindex = toDelArray.findIndex(({\n        id\n      }) => id === action.payload.id);\n      toDelArray.splice(toDelindex, 1);\n      state.records = [...toDelArray];\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default rootFormReducer;","map":{"version":3,"sources":["C:/Users/D E L L/NetMedsTask/src/Redux/rootForm/rootFormReducer.js"],"names":["CREATE_TEMPLATE","CREATE_RECORDS","UPDATE_RECORDS","DELETE_RECORDS","initialState","forms","records","rootFormReducer","state","action","type","list","payload","formName","metaData","formFields","tempList","push","toUpdateArr","toUpdateindex","findIndex","id","toDelArray","toDelindex","splice"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,cAA1B,EAA0CC,cAA1C,EAA0DC,cAA1D,QAAgF,oBAAhF;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAGjBC,EAAAA,OAAO,EAAE;AAHQ,CAArB;;AAMA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAAA;;AACtD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,eAAL;AACI,UAAIW,IAAI,GAAGH,KAAX;AACAG,MAAAA,IAAI,CAACN,KAAL,CAAWI,MAAX,aAAWA,MAAX,0CAAWA,MAAM,CAAEG,OAAnB,oDAAW,gBAAiBC,QAA5B,IAAwC;AACpCC,QAAAA,QAAQ,EAAEL,MAAF,aAAEA,MAAF,2CAAEA,MAAM,CAAEG,OAAV,qDAAE,iBAAiBG;AADS,OAAxC;AAGAP,MAAAA,KAAK,GAAGG,IAAR;AACA,aAAOH,KAAP;;AACJ,SAAKP,cAAL;AACI,UAAIe,QAAQ,GAAGR,KAAf;AACAQ,MAAAA,QAAQ,CAACV,OAAT,CAAiBW,IAAjB,CAAsBR,MAAM,CAACG,OAA7B;AACA,aAAOJ,KAAP;;AACJ,SAAKN,cAAL;AACI,UAAIgB,WAAW,GAAG,CAAC,GAAGV,KAAK,CAACF,OAAV,CAAlB;AACA,UAAIa,aAAa,GAAGD,WAAW,CAACE,SAAZ,CAAsB,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAYA,EAAE,KAAKZ,MAAM,CAACG,OAAP,CAAeS,EAAxD,CAApB;AACAH,MAAAA,WAAW,CAACC,aAAD,CAAX,GAA6BV,MAAM,CAACG,OAApC;AACAJ,MAAAA,KAAK,CAACF,OAAN,GAAgB,CAAC,GAAGY,WAAJ,CAAhB;AACA,aAAOV,KAAP;;AACJ,SAAKL,cAAL;AACI,UAAImB,UAAU,GAAG,CAAC,GAAGd,KAAK,CAACF,OAAV,CAAjB;AACA,UAAIiB,UAAU,GAAGD,UAAU,CAACF,SAAX,CAAqB,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAYA,EAAE,KAAKZ,MAAM,CAACG,OAAP,CAAeS,EAAvD,CAAjB;AACAC,MAAAA,UAAU,CAACE,MAAX,CAAkBD,UAAlB,EAA8B,CAA9B;AACAf,MAAAA,KAAK,CAACF,OAAN,GAAgB,CAAC,GAAGgB,UAAJ,CAAhB;AACA,aAAOd,KAAP;;AACJ;AACI,aAAOA,KAAP;AAzBR;AA2BH,CA5BD;;AA8BA,eAAeD,eAAf","sourcesContent":["import { CREATE_TEMPLATE, CREATE_RECORDS, UPDATE_RECORDS, DELETE_RECORDS } from './rootFormTypes.js';\n\nconst initialState = {\n    forms: {\n    },\n    records: []\n}\n\nconst rootFormReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case CREATE_TEMPLATE:\n            let list = state;\n            list.forms[action?.payload?.formName] = {\n                metaData: action?.payload?.formFields\n            }\n            state = list;\n            return state;\n        case CREATE_RECORDS:\n            let tempList = state;\n            tempList.records.push(action.payload)\n            return state\n        case UPDATE_RECORDS:\n            let toUpdateArr = [...state.records];\n            let toUpdateindex = toUpdateArr.findIndex(({ id }) => id === action.payload.id);\n            toUpdateArr[toUpdateindex] = action.payload;\n            state.records = [...toUpdateArr]\n            return state\n        case DELETE_RECORDS:\n            let toDelArray = [...state.records];\n            let toDelindex = toDelArray.findIndex(({ id }) => id === action.payload.id);\n            toDelArray.splice(toDelindex, 1);\n            state.records = [...toDelArray]\n            return state\n        default:\n            return state\n    }\n}\n\nexport default rootFormReducer"]},"metadata":{},"sourceType":"module"}